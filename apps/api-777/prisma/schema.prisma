generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String  @id @default(cuid())
  name      String
  nameKz    String?
  slug      String? @unique
  sortOrder Int     @default(0)
  isActive  Boolean @default(true)
  dishes    Dish[]
}

model Dish {
  id           String             @id @default(cuid())
  categoryId   String
  name         String
  nameKz       String?
  slug         String?
  description  String?
  descriptionKz String?
  basePrice    Decimal            @db.Decimal(10, 2)
  imageUrl     String?
  isActive     Boolean            @default(true)
  statusId     String?
  category     Category           @relation(fields: [categoryId], references: [id])
  status       DishStatus?        @relation(fields: [statusId], references: [id])
  variants     DishVariant[]
  modifiers    DishModifier[]
  availability DishAvailability[]
  OrderItem    OrderItem[]
}

model DishStatus {
  id     String @id @default(cuid())
  name   String
  color  String @default("#FFB700")
  dishes Dish[]
}

model DishVariant {
  id         String      @id @default(cuid())
  dishId     String
  name       String
  priceDelta Decimal     @db.Decimal(10, 2)
  sortOrder  Int         @default(0)
  dish       Dish        @relation(fields: [dishId], references: [id])
  orderItems OrderItem[] //  обратная связь к OrderItem.variant
}

enum ModifierType {
  addon
  exclusion
}

model DishModifier {
  id      String        @id @default(cuid())
  dishId  String
  name    String
  price   Decimal       @default(0) @db.Decimal(10, 2)
  type    ModifierType
  dish    Dish          @relation(fields: [dishId], references: [id])

  @@index([dishId])
}

model Branch {
  id      String  @id @default(cuid())
  name    String
  address String
  phone   String?
  zones   Zone[]
  orders  Order[] //  обратная связь к Order.branch
  promoCodes PromoCode[]
  expenses Expense[]
}

model Zone {
  id           String             @id @default(cuid())
  name         String
  branchId     String
  deliveryFee  Decimal            @db.Decimal(10, 2)
  minOrder     Decimal            @db.Decimal(10, 2)
  branch       Branch             @relation(fields: [branchId], references: [id])
  availability DishAvailability[]
  orders       Order[]
}

model DishAvailability {
  dishId String
  zoneId String
  dish   Dish   @relation(fields: [dishId], references: [id])
  zone   Zone   @relation(fields: [zoneId], references: [id])

  @@id([dishId, zoneId])
}

enum OrderStatus {
  created
  accepted
  cooking
  delivering
  done
  canceled
}

enum OrderType {
  delivery
  pickup
}

model Order {
  id            String      @id @default(cuid())
  type          OrderType
  status        OrderStatus @default(created)
  customerName  String?
  customerPhone String
  address       String?
  zoneId        String?
  zone          Zone?       @relation(fields: [zoneId], references: [id])
  branchId      String?
  branch        Branch?     @relation(fields: [branchId], references: [id])
  pickupTime    DateTime?
  pickupCode    String?     @unique          
  subtotal      Decimal     @db.Decimal(10, 2)
  deliveryFee   Decimal     @default(0) @db.Decimal(10, 2)
  discount      Decimal     @default(0) @db.Decimal(10, 2)
  total         Decimal     @db.Decimal(10, 2)
  bonusEarned   Int         @default(0)
  bonusUsed     Int         @default(0)
  promoCodeId   String?
  promoCode     PromoCode?  @relation(fields: [promoCodeId], references: [id])
  utmSource     String?
  utmMedium     String?
  utmCampaign   String?
  utmContent    String?
  utmTerm       String?
  referrer      String?
  visitorId     String?
  paidAt        DateTime?
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  items         OrderItem[]
}

model OrderItem {
  id        String       @id @default(cuid())
  orderId   String
  dishId    String
  variantId String?
  qty       Int
  unitPrice Decimal      @db.Decimal(10, 2)
  total     Decimal      @db.Decimal(10, 2)
  order     Order        @relation(fields: [orderId], references: [id])
  dish      Dish         @relation(fields: [dishId], references: [id])
  variant   DishVariant? @relation(fields: [variantId], references: [id])
  addons     String[]     @default([])
  exclusions String[]     @default([])
}

model CmsPage {
  slug     String  @id
  title    String
  content  String
  isActive Boolean @default(true)
}

model User {
  id        String   @id @default(cuid())
  phone     String?  @unique
  email     String?  @unique
  password  String?
  name      String?
  birthDate DateTime?
  notificationsEnabled Boolean @default(true)
  bonus     Int      @default(0)
  orders    Order[]
  bonusTransactions BonusTransaction[]
  createdAt DateTime @default(now())
}

model Admin {
  id        String   @id @default(cuid())
  login     String   @unique
  password  String
  role      String   @default("manager")
  shifts    Shift[]
  createdAt DateTime @default(now())
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  discount    Int
  appliesToDelivery Boolean @default(false)
  expiresAt   DateTime
  conditions  String?
  maxUses     Int?
  usedCount   Int      @default(0)
  branches    Branch[]
  orders      Order[]
}

model Expense {
  id          String   @id @default(cuid())
  branchId    String?
  branch      Branch?  @relation(fields: [branchId], references: [id])
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  createdAt   DateTime @default(now())
}

model Setting {
  key   String  @id
  value String?
}

model MarketingSpend {
  id         String   @id @default(cuid())
  day        DateTime
  source     String?
  medium     String?
  campaign   String?
  impressions Int?    @default(0)
  clicks     Int?    @default(0)
  amount     Decimal  @db.Decimal(10, 2)
  branchId   String?
  @@unique([day, source, campaign, branchId])
}

model BonusTransaction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  used      Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Shift {
  id        String   @id @default(cuid())
  adminId   String
  admin     Admin    @relation(fields: [adminId], references: [id])
  date      DateTime
  hours     Int
  createdAt DateTime @default(now())
}

model AuthCode {
  phone     String   @id
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Mailing {
  id        String   @id @default(cuid())
  message   String
  sendAt    DateTime?
  createdAt DateTime @default(now())
  sent      Boolean  @default(false)
}

model Review {
  id        String   @id @default(cuid())
  name      String
  rating    Int
  comment   String
  pinned    Boolean  @default(false)
  createdAt DateTime @default(now())
}
